(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{104:function(e,t,r){"use strict";r.d(t,"a",(function(){return b})),r.d(t,"b",(function(){return h}));var n=r(0),i=r.n(n);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?s(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):s(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var d=i.a.createContext({}),l=function(e){var t=i.a.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},b=function(e){var t=l(e.components);return i.a.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},p=i.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),b=l(r),p=n,h=b["".concat(s,".").concat(p)]||b[p]||u[p]||a;return r?i.a.createElement(h,c(c({ref:t},d),{},{components:r})):i.a.createElement(h,c({ref:t},d))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,s=new Array(a);s[0]=p;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c.mdxType="string"==typeof e?e:n,s[1]=c;for(var d=2;d<a;d++)s[d]=r[d];return i.a.createElement.apply(null,s)}return i.a.createElement.apply(null,r)}p.displayName="MDXCreateElement"},98:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return s})),r.d(t,"metadata",(function(){return c})),r.d(t,"toc",(function(){return o})),r.d(t,"default",(function(){return l}));var n=r(3),i=r(7),a=(r(0),r(104)),s={id:"marketing",title:"eMarketing v4.0.0",sidebar_label:"Marketing"},c={unversionedId:"marketing",id:"marketing",isDocsHomePage:!1,title:"eMarketing v4.0.0",description:"Overview",source:"@site/docs/marketing.md",slug:"/marketing",permalink:"/api-docs/docs/marketing",editUrl:"https://github.com/perrautc/api-docs/edit/main/dealcloud/docs/marketing.md",version:"current",sidebar_label:"Marketing",sidebar:"someSidebar",previous:{title:"User Management v1.0.0",permalink:"/api-docs/docs/user"},next:{title:"C# Sdk",permalink:"/api-docs/docs/mdx"}},o=[{value:"Overview",id:"overview",children:[]},{value:"Cells",id:"cells",children:[{value:"Entries",id:"entries",children:[]},{value:"History",id:"history",children:[]},{value:"Filter",id:"filter",children:[]},{value:"Get",id:"get",children:[]},{value:"Get Historical Data",id:"get-historical-data",children:[]},{value:"POST",id:"post",children:[]},{value:"PUT",id:"put",children:[]},{value:"DELETE",id:"delete",children:[]}]},{value:"Rows",id:"rows",children:[{value:"GET",id:"get-1",children:[]},{value:"POST",id:"post-1",children:[]},{value:"PATCH",id:"patch",children:[]}]},{value:"Views",id:"views",children:[{value:"GET",id:"get-2",children:[]},{value:"POST",id:"post-2",children:[]}]}],d={toc:o};function l(e){var t=e.components,r=Object(i.a)(e,["components"]);return Object(a.b)("wrapper",Object(n.a)({},d,r,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h2",{id:"overview"},"Overview"),Object(a.b)("h2",{id:"cells"},"Cells"),Object(a.b)("h3",{id:"entries"},"Entries"),Object(a.b)("p",null,"Returns all entries for a given entry type"),Object(a.b)("h4",{id:"request"},"Request"),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-http"}),"GET {{baseUrl}}/api/rest/v4/data/entrydata/{{entryTypeId}}/entries\nAuthorization: {{auth}}\n\n")),Object(a.b)("h4",{id:"response"},"Response"),Object(a.b)("h3",{id:"history"},"History"),Object(a.b)("p",null,"Returns entries modified or deleted since the DataTime value provided. Accepts valid iso8601 DateTime formats"),Object(a.b)("h4",{id:"request-1"},"Request"),Object(a.b)("pre",null,Object(a.b)("code",Object(n.a)({parentName:"pre"},{className:"language-http"}),"GET {{baseUrl}}/api/rest/v4/data/entrydata/{{entryTypeId}}/entries/history\n    ?modifiedSince={{$datetime iso8601 -6 M}}\nAuthorization: {{auth}}\n\n")),Object(a.b)("h4",{id:"response-1"},"Response"),Object(a.b)("h3",{id:"filter"},"Filter"),Object(a.b)("p",null,"Returns an array of EntryIds for filtered Entries. DateTime filters have a resolutions of nearest day."),Object(a.b)("h4",{id:"request-2"},"Request"),Object(a.b)("h4",{id:"response-2"},"Response"),Object(a.b)("h3",{id:"get"},"Get"),Object(a.b)("p",null,"Returns field meta data for the provided entries and fields"),Object(a.b)("h4",{id:"request-3"},"Request"),Object(a.b)("h4",{id:"response-3"},"Response"),Object(a.b)("h3",{id:"get-historical-data"},"Get Historical Data"),Object(a.b)("p",null,"Returns entry field values at the DateTime specified. Deleted entries only returns the value at the time of deletion. Calculated fields only returns current value."),Object(a.b)("h4",{id:"request-4"},"Request"),Object(a.b)("h4",{id:"response-4"},"Response"),Object(a.b)("h3",{id:"post"},"POST"),Object(a.b)("p",null,"Creates new entries. New entries should have a invalid EntryId. Recommendation is to start at -1 and decrement for each new entry in a batch. Take a maximum batch size of 10000 items."),Object(a.b)("h4",{id:"request-5"},"Request"),Object(a.b)("h4",{id:"response-5"},"Response"),Object(a.b)("h3",{id:"put"},"PUT"),Object(a.b)("p",null,"Updates existing entries. Entries should have a valid EntryId. Take a maximum batch size of 10000 items."),Object(a.b)("h4",{id:"request-6"},"Request"),Object(a.b)("h4",{id:"response-6"},"Response"),Object(a.b)("h3",{id:"delete"},"DELETE"),Object(a.b)("p",null,"Deletes entries"),Object(a.b)("h4",{id:"request-7"},"Request"),Object(a.b)("h4",{id:"response-7"},"Response"),Object(a.b)("h2",{id:"rows"},"Rows"),Object(a.b)("h3",{id:"get-1"},"GET"),Object(a.b)("p",null,"Gets entries and their field meta data"),Object(a.b)("h4",{id:"request-8"},"Request"),Object(a.b)("h4",{id:"response-8"},"Response"),Object(a.b)("h3",{id:"post-1"},"POST"),Object(a.b)("p",null,"Creates new entries. New entries should have a invalid EntryId. Recommendation is to start at -1 and decrement for each new entry in a batch."),Object(a.b)("h4",{id:"request-9"},"Request"),Object(a.b)("h4",{id:"response-9"},"Response"),Object(a.b)("h3",{id:"patch"},"PATCH"),Object(a.b)("p",null,"Updates existing entries. Entries should have a valid EntryId."),Object(a.b)("h4",{id:"request-10"},"Request"),Object(a.b)("h4",{id:"response-10"},"Response"),Object(a.b)("h2",{id:"views"},"Views"),Object(a.b)("h3",{id:"get-2"},"GET"),Object(a.b)("p",null,"Gets views"),Object(a.b)("h4",{id:"request-11"},"Request"),Object(a.b)("h4",{id:"response-11"},"Response"),Object(a.b)("h3",{id:"post-2"},"POST"),Object(a.b)("p",null,"Gets view data"),Object(a.b)("h4",{id:"request-12"},"Request"),Object(a.b)("h4",{id:"response-12"},"Response"))}l.isMDXComponent=!0}}]);